plot (density (as.vector(Theta.Citizen[,party.pref=="UDI"])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
lines (density (as.vector(Theta.Citizen[,party.pref=="PS"])), col="red")
lines (density (as.vector(Theta.Citizen[,party.pref=="PDC"])), col="blue")
lines (density (as.vector(Theta.Citizen[,party.pref=="RN"])), col="purple")
lines (density (as.vector(Theta.Citizen[,party.pref=="PPD"])), col="green")
Theta.Congress <-  rbind (chainsConv[[1]][,1:123]
, chainsConv[[2]][,1:123]) * (-1)
Theta.Citizen  <-  rbind (chainsConv[[1]][,124:ncol(chainsConv[[2]])]
, chainsConv[[2]][,124:ncol(chainsConv[[2]])]) * (-1)
prefOrder.cit <- order (colMeans (Theta.Citizen))  # ordered from negative to positive
idealPoints.cit <- t(apply (Theta.Citizen, 2, quantile, prob=c(0.025,0.5,0.975)))
rownames (idealPoints.cit) <- rownames (RCall)[124:613]
prefOrder.cit <- order (colMeans (Theta.Citizen))  # ordered from negative to positive
idealPointsCit <- t(apply (Theta.Citizen, 2, quantile, prob=c(0.025,0.5,0.975)))
plot (density (as.vector(Theta.Citizen[,party.pref=="UDI"])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
lines (density (as.vector(Theta.Citizen[,party.pref=="PS"])), col="red")
lines (density (as.vector(Theta.Citizen[,party.pref=="PDC"])), col="blue")
lines (density (as.vector(Theta.Citizen[,party.pref=="RN"])), col="purple")
lines (density (as.vector(Theta.Citizen[,party.pref=="PPD"])), col="green")
plot (density (as.vector(idealPoints.cit[party.pref=="UDI",2])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
plot (density (as.vector(idealPoints.cit[party.pref=="UDI",2])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
lines (density (as.vector(idealPoints.cit[party.pref=="PS",2])), col="red")
lines (density (as.vector(idealPoints.cit[party.pref=="PDC",2])), col="blue")
lines (density (as.vector(idealPoints.cit[party.pref=="RN",2])), col="purple")
lines (density (as.vector(idealPoints.cit[party.pref=="PPD",2])), col="green")
colnames (party.cit)
plot (density (as.vector(idealPoints.cit[party.cit$Q1_1>0,2])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
plot (density (as.vector(idealPoints.cit[party.cit$Q1_1>0 & !is.na(party.cit$Q1_1),2])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_2>0 & !is.na(party.cit$Q1_2),2])), col="blue")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_3>0 & !is.na(party.cit$Q1_3),2])), col="red")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_4>0 & !is.na(party.cit$Q1_4),2])), col="purple")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_5>0 & !is.na(party.cit$Q1_5),2])), col="green")
# Calculate 95% credible intervals for ideal points
Theta.Congress <-  rbind (chainsConv[[1]][,1:123]
, chainsConv[[2]][,1:123]) * (-1)
Theta.Citizen  <-  rbind (chainsConv[[1]][,124:ncol(chainsConv[[2]])]
, chainsConv[[2]][,124:ncol(chainsConv[[2]])])
prefOrder.cit <- order (colMeans (Theta.Citizen))  # ordered from negative to positive
idealPoints.cit <- t(apply (Theta.Citizen, 2, quantile, prob=c(0.025,0.5,0.975)))
rownames (idealPoints.cit) <- rownames (RCall)[124:613]
prefOrder.cit <- order (colMeans (Theta.Citizen))  # ordered from negative to positive
idealPointsCit <- t(apply (Theta.Citizen, 2, quantile, prob=c(0.025,0.5,0.975)))
party.cit <- survey_info[,c('Q1_1', 'Q1_2', 'Q1_3', 'Q1_4', 'Q1_5', 'Q1_6')]
party.cit <- transform(party.cit, Q1_1=as.numeric(as.character(Q1_1)),
Q1_2=as.numeric(as.character(Q1_2)),
Q1_3=as.numeric(as.character(Q1_3)),
Q1_4=as.numeric(as.character(Q1_4)),
Q1_5=as.numeric(as.character(Q1_5)),
Q1_6=as.numeric(as.character(Q1_6)))
Mean.Feelings <- colMeans (party.cit, na.rm=T)
Median.Feelings <- apply (party.cit, 2, quantile, prob=0.5, na.rm=T)
Mean.Positive.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x>0], prob=0.5, na.rm=T)})
Mean.Negative.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x<0], prob=0.5, na.rm=T)})
names (Mean.Positive.Feelings) <- names (Mean.Feelings) <- names (Median.Feelings) <- c("UDI","PDC","PS","RN","PPD","Other")
party.cit.2 <- party.cit
party.cit.2[is.na(party.cit)] <- -100
pess <- apply(party.cit.2,1,function(x){
all(x==-100)
})
party.pref <- apply(party.cit.2, 1, function(x){
as.numeric(substr(sample(names(which(x == max(x))), 1), 4, 4))
})
##recode anyone who put -100 for all parties to 6
party.pref[pess] <- 6
party.pref <- recode(party.pref, "1='UDI';
2='PDC'; 3='PS'; 4='RN'; 5='PPD'; 6='Other'")
cit.colors <- party.pref <- as.factor (party.pref)
levels (cit.colors) <- c('grey', 'blue', 'green', 'red', 'purple', 'black')
aggTable <- cbind (Median.Feelings, Mean.Feelings, Mean.Positive.Feelings, c(81,48,104,99,56,102))
colnames (aggTable) <- c("Median score","Mean score","Mean score (positives only)","First preference")
xtable (aggTable)
plot (density (as.vector(Theta.Citizen[,party.pref=="UDI"])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
lines (density (as.vector(Theta.Citizen[,party.pref=="PS"])), col="red")
lines (density (as.vector(Theta.Citizen[,party.pref=="PDC"])), col="blue")
lines (density (as.vector(Theta.Citizen[,party.pref=="RN"])), col="purple")
lines (density (as.vector(Theta.Citizen[,party.pref=="PPD"])), col="green")
plot (density (as.vector(idealPoints.cit[party.pref=="UDI",2])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
lines (density (as.vector(idealPoints.cit[party.pref=="PS",2])), col="red")
lines (density (as.vector(idealPoints.cit[party.pref=="PDC",2])), col="blue")
lines (density (as.vector(idealPoints.cit[party.pref=="RN",2])), col="purple")
lines (density (as.vector(idealPoints.cit[party.pref=="PPD",2])), col="green")
plot (density (as.vector(idealPoints.cit[party.cit$Q1_1>0 & !is.na(party.cit$Q1_1),2])), col="black", xlim=c(-4,4), ylim=c(0,1), ann=FALSE, bty="n")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_2>0 & !is.na(party.cit$Q1_2),2])), col="blue")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_3>0 & !is.na(party.cit$Q1_3),2])), col="red")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_4>0 & !is.na(party.cit$Q1_4),2])), col="purple")
lines (density (as.vector(idealPoints.cit[party.cit$Q1_5>0 & !is.na(party.cit$Q1_5),2])), col="green")
rm (list=ls())
library (car)
library (MCMCpack)
install.packages('MCMCpack')
install.packages('gtools')
install.packages('mcmcplots')
install.packages('pscl')
install.packages('wnominate')
library (car)
library (MCMCpack)
library (gtools)
library (mcmcplots)
library (pscl)
library (wnominate)
dataPath <- "~/Dropbox/Chile-Deputies-RCV/Condensed-CSV/"
plotPath <- "~/Dropbox/LatinAmericanScaling/PaperChile/Graphs/"
load (paste(dataPath, "membervotes.RData", sep=""))
dataPath <- "~/Dropbox/ChileProject/Chile-Deputies-RCV/Condensed-CSV/"
plotPath <- "~/Dropbox/ChileProject/LatinAmericanScaling/PaperChile/Graphs/"
load (paste(dataPath, "membervotes.RData", sep=""))
getwd()
setwd('/home/david/')
load (paste(dataPath, "membervotes.RData", sep=""))
load('/home/david/Dropbox/ChileProject/Chile-Deputies-RCV/Condensed-CSV/membervotes.Rdata')
dataPath <- "~/Dropbox/ChileProject/Chile-Deputies-RCV/Condensed-CSV/"
plotPath <- "~/Dropbox/ChileProject/LatinAmericanScaling/PaperChile/Graphs/"
load (paste(dataPath, "membervotes.Rdata", sep=""))
voteID <- as.character (membervotes[2,-1])
validVoteID <- ifelse (voteID=="", 0, 1) # actual votes on laws, not procedural matters
voteDate <- as.Date (as.character (membervotes[1,-1]), "%m/%d/%Y")
orderDate <- order (voteDate)
voteYear <- as.numeric (substr (colnames (membervotes)[-1], 1, 4))
voteNum  <- as.numeric (substr (colnames (membervotes)[-1], 6, 10))
congressMember <- as.character (membervotes[4:252,1])
respondent <- as.character (membervotes[253:nrow(membervotes),1])
voteInSurvey <- as.logical (membervotes[3,-1])
congressLIII <- ifelse (voteDate >= "2010-03-11" & voteDate <= "2014-03-11", 1, 0)
surveyBills <- unique (voteID[voteInSurvey==TRUE])
unique (voteDate[voteInSurvey==TRUE])
Votes2Check <- data.frame (voteID, voteDate, voteNum)
Votes2Check[is.element(voteID, surveyBills),]
unique (Votes2Check$voteID[is.element(voteID, surveyBills)])
# Versions of this snippet return all dates in which a particular iniciativa was considered
Votes2Check$voteDate[which (Votes2Check$voteID=="3815-07")] # First considered in 2005, passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="3849-04")] # First considered in 2009, passed in 2014
Votes2Check$voteDate[which (Votes2Check$voteID=="7911-06")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7898-04")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7874-04")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7466-07")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8036-11")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8217-05")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8070-04")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7678-02")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8387-05")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8488-05")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7923-06")] # First considered in 2012, passed in 2013
Votes2Check$voteDate[which (Votes2Check$voteID=="8011-05")]
party <- read.table (paste (dataPath, "congress.csv", sep=""), sep=",", header=T)[,2]
party.colors <- recode (party,"c('IC','IND','PRI','PC','PRSD')='OTHER'")
levels (party.colors) <- c("black","blue","green","red","purple","yellow")
# Legislator roll call
allVotes <- data.matrix (read.table (paste(dataPath, "membervotes.txt", sep=""), header=TRUE, sep="\t"))
LIIIcongressVotes <- allVotes[1:length(congressMember), congressLIII==1 & validVoteID==1]
colnames (LIIIcongressVotes) <- voteID[congressLIII==1 & validVoteID==1]
notInCongress <- apply (LIIIcongressVotes, 1, invalid)
RollCallLIII <- LIIIcongressVotes[notInCongress==FALSE,]
rownames (RollCallLIII) <- congressMember[notInCongress==FALSE]
RollCallLIII <- recode (RollCallLIII, "9=0") # turn abstentions into NAYs
# Run wnominate, 2-dimensions
nominateRC <- rollcall (RollCallLIII, legis.names=rownames(RollCallLIII))
print(nominateRC$votes[1:6,1:6])
idealPointsNominate <- wnominate (nominateRC, polarity=c(47,47), verbose=T) #
droppedVotes <- is.na (idealPointsNominate$rollcalls$correctYea)
droppedVotes
voteInSurvey[congressLIII==1 & validVoteID==1][droppedVotes==TRUE]
voteInSurvey[congressLIII==1 & validVoteID==1][droppedVotes==FALSE]
shouldStay <- unique (colnames(LIIIcongressVotes)[voteInSurvey[congressLIII==1 & validVoteID==1]==TRUE])
notDropped <- unique (colnames(LIIIcongressVotes)[droppedVotes==FALSE])
shouldStay
notDropped
is.element (shouldStay, notDropped)
pdf (paste (plotPath, "nominate2D.pdf", sep=""), h=5, w=7)
plotPath <- "~/Dropbox/ChileProject/PaperChile/Graphs/"
plot (idealPointsNominate$legislators$coord2D~idealPointsNominate$legislators$coord1D, col=as.character(party.colors), pch=19, ann=F)
legend ("top", legend=c("PS","PDC","PPD","RN","UDI","Other"), col=c("red","blue","green","purple","yellow","black"), pch=19, bty="n")
mtext (side=1, line=2.5, text="Left-Right")
identify (x=idealPointsNominate$legislators$coord1D, y=idealPointsNominate$legislators$coord2D, n=6)
library (car)
library (MCMCpack)
library (gtools)
library (mcmcplots)
library (pscl)
library (wnominate)
?MCMCirt1d
rm(list=ls())
library (car)
library (MCMCpack)
library (gtools)
library (mcmcplots)
library (pscl)
library (wnominate)
dataPath <- "~/Dropbox/ChileProject/Chile-Deputies-RCV/Condensed-CSV/"
plotPath <- "~/Dropbox/ChileProject/PaperChile/Graphs/"
load (paste(dataPath, "membervotes.Rdata", sep=""))
voteID <- as.character (membervotes[2,-1])
validVoteID <- ifelse (voteID=="", 0, 1) # actual votes on laws, not procedural matters
voteDate <- as.Date (as.character (membervotes[1,-1]), "%m/%d/%Y")
orderDate <- order (voteDate)
voteYear <- as.numeric (substr (colnames (membervotes)[-1], 1, 4))
voteNum  <- as.numeric (substr (colnames (membervotes)[-1], 6, 10))
congressMember <- as.character (membervotes[4:252,1])
respondent <- as.character (membervotes[253:nrow(membervotes),1])
voteInSurvey <- as.logical (membervotes[3,-1])
congressLIII <- ifelse (voteDate >= "2010-03-11" & voteDate <= "2014-03-11", 1, 0)
surveyBills <- unique (voteID[voteInSurvey==TRUE])
unique (voteDate[voteInSurvey==TRUE])
Votes2Check <- data.frame (voteID, voteDate, voteNum)
Votes2Check[is.element(voteID, surveyBills),]
unique (Votes2Check$voteID[is.element(voteID, surveyBills)])
# Versions of this snippet return all dates in which a particular iniciativa was considered
Votes2Check$voteDate[which (Votes2Check$voteID=="3815-07")] # First considered in 2005, passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="3849-04")] # First considered in 2009, passed in 2014
Votes2Check$voteDate[which (Votes2Check$voteID=="7911-06")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7898-04")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7874-04")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7466-07")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8036-11")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8217-05")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8070-04")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7678-02")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8387-05")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="8488-05")] # Considered and passed in 2012
Votes2Check$voteDate[which (Votes2Check$voteID=="7923-06")] # First considered in 2012, passed in 2013
Votes2Check$voteDate[which (Votes2Check$voteID=="8011-05")]
# Import party membership
party <- read.table (paste (dataPath, "congress.csv", sep=""), sep=",", header=T)[,2]
party.colors <- recode (party,"c('IC','IND','PRI','PC','PRSD')='OTHER'")
levels (party.colors) <- c("black","blue","green","red","purple","yellow")
# Legislator roll call
allVotes <- data.matrix (read.table (paste(dataPath, "membervotes.txt", sep=""), header=TRUE, sep="\t"))
LIIIcongressVotes <- allVotes[1:length(congressMember), congressLIII==1 & validVoteID==1]
colnames (LIIIcongressVotes) <- voteID[congressLIII==1 & validVoteID==1]
notInCongress <- apply (LIIIcongressVotes, 1, invalid)
RollCallLIII <- LIIIcongressVotes[notInCongress==FALSE,]
rownames (RollCallLIII) <- congressMember[notInCongress==FALSE]
RollCallLIII <- recode (RollCallLIII, "9=0") # turn abstentions into NAYs
# Run wnominate, 2-dimensions
nominateRC <- rollcall (RollCallLIII, legis.names=rownames(RollCallLIII))
print(nominateRC$votes[1:6,1:6])
idealPointsNominate <- wnominate (nominateRC, polarity=c(47,47), verbose=T) #
droppedVotes <- is.na (idealPointsNominate$rollcalls$correctYea)
# TRUE values in the following vector are citizen survey votes that are dropped
voteInSurvey[congressLIII==1 & validVoteID==1][droppedVotes==TRUE]
# TRUE values in the following vector are citizen survey votes that are kept
voteInSurvey[congressLIII==1 & validVoteID==1][droppedVotes==FALSE]
# shouldStay are votes that we ask in the citizen survey
shouldStay <- unique (colnames(LIIIcongressVotes)[voteInSurvey[congressLIII==1 & validVoteID==1]==TRUE])
# notDropped are votes that are minimally informative according to nominate criteria
notDropped <- unique (colnames(LIIIcongressVotes)[droppedVotes==FALSE])
# the next command reveals that vote 8299-11 is not informative;
# this is the only vote we should drop from the citizen survey
is.element (shouldStay, notDropped)
# Plot nominate
pdf (paste (plotPath, "nominate2D.pdf", sep=""), h=5, w=7)
par (mar=c(3.5,2,1,1))
plot (idealPointsNominate$legislators$coord2D~idealPointsNominate$legislators$coord1D, col=as.character(party.colors), pch=19, ann=F)
legend ("top", legend=c("PS","PDC","PPD","RN","UDI","Other"), col=c("red","blue","green","purple","yellow","black"), pch=19, bty="n")
mtext (side=1, line=2.5, text="Left-Right")
#identify (x=idealPointsNominate$legislators$coord1D, y=idealPointsNominate$legislators$coord2D, n=6)
dev.off ()
###############################
# Bayes analysis 1 dimension  #
###############################
# RCposterior <- MCMCirt1d(RollCallLIII[,droppedVotes==FALSE], theta.constraints=list("Hasbún S. Gustavo"="+", "Schilling R. Marcelo"="-")
#                          , burnin=25000, mcmc=50000, thin=200, verbose=1000
#                          , store.item=TRUE
#                          , seed=1971)
#  						 , seed=3000)
# Ran this twice
# save (RCposterior, file=paste(dataPath, "RCposterior1.RData", sep=""))
# save (RCposterior, file=paste(dataPath, "RCposterior2.RData", sep=""))
load (paste (dataPath, "RCposterior1.RData", sep=""))
RC1 <- RCposterior; rm (RCposterior)
load (paste (dataPath, "RCposterior2.RData", sep=""))
RC2 <- RCposterior; rm (RCposterior)
chainsConv <- list (as.mcmc(RC1), as.mcmc(RC2))
gelman.diag  (as.mcmc.list (chainsConv), multivariate=FALSE) #
load(RCall, file=paste(dataPath, "rcAll.RData", sep=""))
load(file=paste(dataPath, "rcAll.RData", sep=""))
View(RCall)
names(RCall)
colnames(allVotes)
colnames(allVotes)[1:100]
rm(list=ls())
library (car)
library (MCMCpack)
library (gtools)
library (mcmcplots)
library (pscl)
library (wnominate)
dataPath <- "~/Dropbox/ChileProject/Chile-Deputies-RCV/Condensed-CSV/"
plotPath <- "~/Dropbox/ChileProject/PaperChile/Graphs/"
party <- read.table (paste (dataPath, "congress.csv", sep=""), sep=",", header=T)[,2]
party
load (file=paste(dataPath, "rcAll.RData", sep=""))
rownames(RCall)
colnames(RCall)[1:100]
cits <- read.csv(paste(dataPath, survey_info.csv, sep=''))
load (file=paste(dataPath, "survey_info.RData", sep=""))
load (file=paste(dataPath, "survey_info.Rdata", sep=""))
party.cit <- survey_info[,c('Q1_1', 'Q1_2', 'Q1_3', 'Q1_4', 'Q1_5', 'Q1_6')]
party.cit <- transform(party.cit, Q1_1=as.numeric(as.character(Q1_1)),
Q1_2=as.numeric(as.character(Q1_2)),
Q1_3=as.numeric(as.character(Q1_3)),
Q1_4=as.numeric(as.character(Q1_4)),
Q1_5=as.numeric(as.character(Q1_5)),
Q1_6=as.numeric(as.character(Q1_6)))
Mean.Feelings <- colMeans (party.cit, na.rm=T)
Median.Feelings <- apply (party.cit, 2, quantile, prob=0.5, na.rm=T)
Mean.Positive.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x>0], prob=0.5, na.rm=T)})
Mean.Negative.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x<0], prob=0.5, na.rm=T)})
names (Mean.Positive.Feelings) <- names (Mean.Feelings) <- names (Median.Feelings) <- c("UDI","PDC","PS","RN","PPD","Other")
party.cit.2 <- party.cit
party.cit.2[is.na(party.cit)] <- -100
pess <- apply(party.cit.2,1,function(x){
all(x==-100)
})
party.pref <- apply(party.cit.2, 1, function(x){
as.numeric(substr(sample(names(which(x == max(x))), 1), 4, 4))
})
party.pref
party.pref[pess] <- 6
party.pref <- recode(party.pref, "1='UDI';
2='PDC'; 3='PS'; 4='RN'; 5='PPD'; 6='Other'")
party <- c(party, party.pref)
490-613
in.survey <- apply(RCall[124:613,],1,function(x) !all(is.na))
not.in.survey <- apply(RCall[124:613,],1,function(x) all(is.na))
RCall[124:613,1:3]
in.survey <- apply(RCall[124:613,],1,function(x) !all(is.na(x)))
in.survey
sum(in.survey)
in.survey <- apply(RCall[124:613,],2,function(x) !all(is.na(x)))
sum(in.survey)
hold<-RCall[,in.survey]
View(hold)
levels(party)
unique(party)
party
party <- read.table (paste (dataPath, "congress.csv", sep=""), sep=",", header=T)[,2]
unique(party)
party <- recode (party,"c('IC','IND','PRI','PC','PRSD')='OTHER'")
party
party.cit <- survey_info[,c('Q1_1', 'Q1_2', 'Q1_3', 'Q1_4', 'Q1_5', 'Q1_6')]
party.cit <- transform(party.cit, Q1_1=as.numeric(as.character(Q1_1)),
Q1_2=as.numeric(as.character(Q1_2)),
Q1_3=as.numeric(as.character(Q1_3)),
Q1_4=as.numeric(as.character(Q1_4)),
Q1_5=as.numeric(as.character(Q1_5)),
Q1_6=as.numeric(as.character(Q1_6)))
Mean.Feelings <- colMeans (party.cit, na.rm=T)
Median.Feelings <- apply (party.cit, 2, quantile, prob=0.5, na.rm=T)
Mean.Positive.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x>0], prob=0.5, na.rm=T)})
Mean.Negative.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x<0], prob=0.5, na.rm=T)})
names (Mean.Positive.Feelings) <- names (Mean.Feelings) <- names (Median.Feelings) <- c("UDI","PDC","PS","RN","PPD","Other")
party.cit.2 <- party.cit
party.cit.2[is.na(party.cit)] <- -100
pess <- apply(party.cit.2,1,function(x){
all(x==-100)
})
party.pref <- apply(party.cit.2, 1, function(x){
as.numeric(substr(sample(names(which(x == max(x))), 1), 4, 4))
})
party.pref[pess] <- 6
party.pref <- recode(party.pref, "1='UDI';
2='PDC'; 3='PS'; 4='RN'; 5='PPD'; 6='Other'")
party
party.pref
party
party <- as.character(party)
party <- c(party, party.pref)
party
party.pref
length(party.pref)
unique(party)
party <- read.table (paste (dataPath, "congress.csv", sep=""), sep=",", header=T)[,2]
party <- recode (party,"c('IC','IND','PRI','PC','PRSD')='OTHER'")
party.cit <- survey_info[,c('Q1_1', 'Q1_2', 'Q1_3', 'Q1_4', 'Q1_5', 'Q1_6')]
party.cit <- transform(party.cit, Q1_1=as.numeric(as.character(Q1_1)),
Q1_2=as.numeric(as.character(Q1_2)),
Q1_3=as.numeric(as.character(Q1_3)),
Q1_4=as.numeric(as.character(Q1_4)),
Q1_5=as.numeric(as.character(Q1_5)),
Q1_6=as.numeric(as.character(Q1_6)))
Mean.Feelings <- colMeans (party.cit, na.rm=T)
Median.Feelings <- apply (party.cit, 2, quantile, prob=0.5, na.rm=T)
Mean.Positive.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x>0], prob=0.5, na.rm=T)})
Mean.Negative.Feelings <- apply (party.cit, 2, function(x){ quantile (x[x<0], prob=0.5, na.rm=T)})
names (Mean.Positive.Feelings) <- names (Mean.Feelings) <- names (Median.Feelings) <- c("UDI","PDC","PS","RN","PPD","Other")
party.cit.2 <- party.cit
party.cit.2[is.na(party.cit)] <- -100
pess <- apply(party.cit.2,1,function(x){
all(x==-100)
})
party.pref <- apply(party.cit.2, 1, function(x){
as.numeric(substr(sample(names(which(x == max(x))), 1), 4, 4))
})
##recode anyone who put -100 for all parties to 6
party.pref[pess] <- 6
party.pref <- recode(party.pref, "1='UDI';
2='PDC'; 3='PS'; 4='RN'; 5='PPD'; 6='OTHER'")
party <- as.character(party)
party <- c(party, party.pref)
unique(party)
concertacion <- party%in%c('PDC', 'PS', 'PPD')
concertacion
alianza <- party%in%c('UDI', 'RN')
sum(alianza)
sum(concertacion)
al.means <- apply(hold[alianza,],2,mean)
al.means
al.means <- apply(hold[alianza,],2,mean,na.rm=TRUE)
al.means
con.means <- apply(hold[alianza,],2,mean,na.rm=TRUE)
con.means
con.means <- apply(hold[concertacion,],2,mean,na.rm=TRUE)
con.means
diffs<-abs(con.mean-al.means)
diffs<-abs(con.means-al.means)
max(diffs)
which(max(diffs))
which(is.max(diffs))
which(diffs==max(diffs))
con.means[23]
al.means[23]
library(weightTAPSPACK)
?weightTAPSPACK
?variablesTAPS
?weightTAPSPACK
?variablesTAPS
variables('JAN',2012)
variablesTAPS('JAN',2012)
variablesTAPS('JAN',2013)
variablesTAPS('JAN',2012)
variablesTAPS('JAN',2013)
variablesTAPS('JAN',2012)
variablesTAPS('JAN',2013)
variablesTAPS('JAN',2012)
variablesTAPS('JAN',2012)[1]
variablesTAPS('JAN',2012)[[1]]
ff<-variablesTAPS('JAN',2012)
class(ff)
f<-variablesTAPS('JAN',2013)
ff==f
f<-variablesTAPS('FEB',2012)
f
ff
f
ff
colnames(TAPScum)
f
ff
ff[[1]]
ff[[1]][1]
f[[1]][1]
?weightTAPS
ff[[1]]==f[[1]]
ff<-variablesTAPS('FEB',2012)
f<-variablesTAPS('AUG',2012)
ff[[1]]==f[[1]]
length(f)
length(ff)
names(ff)
names(f)
?variablesTAPS
f<-variablesTAPS(c('JAN','FEB'),year=2012)
f<-variablesTAPS(c('JAN','FEB'),year=c(2012,2012))
paste(c('F','J'),c(2012,2012),sep=' ')
length(paste(c('F','J'),c(2012,2012),sep=' '))
library(weightTAPSPACK)
?weightTAPS
myOutcome <- c("APPRCONGS2","APPRCONGS6")
myCovars <- c("POLKNOW3S2","POLKNOW6S2")
test<-weightTAPS(interact=FALSE,outcome=myOutcome,covars=myCovars,weight=FALSE,refusedasNA=TRUE,method="hotdeck",m=5,pop.base=1,trunc_at=5,stringsAsFactors=TRUE)
test
test
rm(list=ls())
library(weightTAPSPACK)
?weightTAPS
myOutcome <- c("APPRCONGS2","APPRCONGS6")
myCovars <- c("POLKNOW3S2","POLKNOW6S2")
test<-weightTAPS(interact=FALSE,outcome=myOutcome,covars=myCovars,weight=FALSE,refusedasNA=TRUE,method="hotdeck",m=5,pop.base=1,trunc_at=5,stringsAsFactors=TRUE)
test
getdf(test)[1]
test<-weightTAPS(interact=FALSE,outcome=myOutcome,covars=myCovars,weight=FALSE,refusedasNA=TRUE,method="none",m=5,pop.base=1,trunc_at=5,stringsAsFactors=TRUE)
class(getdf(test))
test<-weightTAPS(interact=FALSE,outcome=myOutcome,covars=myCovars,weight=FALSE,refusedasNA=TRUE,method="hotdeck",m=5,pop.base=1,trunc_at=5,stringsAsFactors=TRUE)
class(getdf(test))
?impute.NN_HD
rm(list=ls())
library(devtools)
library(roxygen2)
setwd("/home/david/TAPSweights/")
current.code <- as.package("weightTAPSPACK")
load_all(current.code)
document(current.code)
install(pkg=current.code,local=TRUE,args=c('--data-compress=xz','--resave-data'))
build(current.code,path=getwd(),binary=TRUE,args=c('--data-compress=xz','--resave-data'))
library(weightTAPSPACK)
rm(list=ls())
library(devtools)
library(roxygen2)
rm(list=ls())
library(devtools)
library(roxygen2)
rm(list=ls())
library(devtools)
library(roxygen2)
?release
setwd('~weightTAPS/')
setwd('/weightTAPS/')
setwd('home/david/weightTAPS/')
setwd('/home/david/weightTAPS/')
release('weightTAPSPACK_0.1.tgz', check=FALSE)
release('/home/david/weightTAPS/', check=FALSE)
release('/home/david/weightTAPS/weightTAPSPACK', check=FALSE)
